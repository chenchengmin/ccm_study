import java.io.File;
import java.io.IOException;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


//import com.erayt.base.common.util.AesBaseUtil;
public class Test1 {
	
	/**
	 * 将一个list均分成n个list,主要通过偏移量来实现的
	 * @param source
	 * @return
	 */
	public static <T> List<List<T>> averageAssign(List<T> source,int n){
		List<List<T>> result=new ArrayList<List<T>>();
		int remaider=source.size()%n;  //(先计算出余数)
		int number=source.size()/n;  //然后是商
		int offset=0;//偏移量
		for(int i=0;i<n;i++){
			List<T> value=null;
			if(remaider>0){
				value=source.subList(i*number+offset, (i+1)*number+offset+1);
				remaider--;
				offset++;
			}else{
				value=source.subList(i*number+offset, (i+1)*number+offset);
			}
			result.add(value);
		}
		return result;
	}

	
	  
    /**
	 * 删除空集合元素
	 * @param pushList
	 * @author ccm
	 */
	private static void delteEmptyList(List<List<MindgoSubscription>> lists) {
		int size = lists.size();
		for(int i = 0 ;i < size ; i++){
			List<MindgoSubscription> tempSub = lists.get(i);
			if(tempSub.size()==0){
				lists.remove(i);
				size--;
				i--;
			}
		}
	}
	
	//volatile关键字测试
	public volatile int inc = 0;
     
    public void increase() {
        inc++;
    }
	
	
	//8888
	public static void main(String[] args) throws IOException, InterruptedException {
		/*String a ="512300137918234624";
		
		System.out.println(Long.parseLong(a));
		System.out.println(Math.random());*/
		
		
		/* 
		 * 0.8733900895001091, 
		 0.9607072691552063,
		 0.969438987120716, 
		 0.9825365640689806,
		 1.0*/
		
		/*
		   List<Double> sortProbList = new ArrayList<Double>();
		   sortProbList.add(0.06548788474132286);
		   sortProbList.add(0.15903679983818975);
		   sortProbList.add(0.5020737830168086);
		   sortProbList.add(0.5022920759659463);
		   
		   sortProbList.add(0.8733900895001091);
		   sortProbList.add(0.9607072691552063);
		   sortProbList.add(0.969438987120716);
		   sortProbList.add(0.9825365640689806);
		   sortProbList.add(1.0);
		   
		   System.out.println(sortProbList.indexOf(0.9607072691552063));*/
		   
		
		
		/*System.out.println(15%4);f
		System.out.println(15/4);*/
		//解密
		/*	String encode = "7336f3a5809fd26f";
		String decodePhone = AesBaseUtil.decode(encode);
		System.out.println("解密后的手机号："+decodePhone);*/
		
		//加密
		/*String decode = "18368163292 ";
		String encodePhone = AesBaseUtil.encode(decode);
		System.out.println("加密后的手机号："+encodePhone);
		*/
		/*File afile = new File("C:\\zuidaima_com_a\\zuidaima_com.txt");
		System.out.println(afile.getName());*/
		
		
		/*	System.out.println(System.currentTimeMillis());*/
		
		
		
		/* double money = 399.74099999999993;
		 DecimalFormat df=new DecimalFormat("#.0000");
		 System.out.println(df.format(money));*/
		
		/* DecimalFormat formater = new DecimalFormat();
		 formater.setMaximumFractionDigits(4);//设置某个数的小数部分中所允许的最大数字位数
		 formater.setGroupingSize(0);//设置分组大小。分组大小是数的整数部分中分组分隔符之间的数字位数,例如在数 "123,456.78" 中，分组大小是 3  
		 formater.setRoundingMode(RoundingMode.FLOOR);//此舍入模式始终不会增加计算值。
		 String format = formater.format(Double.valueOf("999999999.999999"));
		 System.out.println(format);*/

		/* ArrayList list = new ArrayList();
		 list.add("1");
		 list.add("2");
		 Object[] aa = list.toArray();
		//将ArrayList转成数组,用数组去构造CopyOnWriteArrayList 对象
		 CopyOnWriteArrayList cal = new CopyOnWriteArrayList(aa); 
		for(Object a : cal){
			System.out.println(a);
			
		}*/
		
		 Student st1 = new Student();
		 st1.setName("ccm");
		 st1.setAge(33);
		 Student st2 = new Student();
		 st2.setName("ccm2");
		 st2.setAge(34);
		 
		 ArrayList<Student> list = new ArrayList<Student>();
		 list.add(st1);
		 list.add(st2);
		 Map<String,Object> map = new HashMap<String, Object>();
		 map.put("ininst", list);
		 
		 
		 //将ArrayList转成数组,用数组去构造CopyOnWriteArrayList 对象
		 Object[] aa = list.toArray();
		 CopyOnWriteArrayList<Object> cal = new CopyOnWriteArrayList<Object>(aa); 
		 Student s = null;
		for(Object a : cal){
			s = (Student)a;
			System.out.println(s.getName());
		}
		 
		/*for(Object a : instList){
			System.out.println(a);
		}*/
		 
		
		//
		//%%%%%%解析取出binlog sql=drop table if exists `quant_account_subcribe` /* generated by server */,
		//tableNameLower=quant_account_subcribe	,
		//sql.contains(tableNameLower)=false
		
		/*String tableNameLower = "quant_account_subcribe".toLowerCase();
		String sql = "drop table if exists `quant_account_subcribe` ".toLowerCase();
		System.out.println(sql.replace('`', ' '));
		System.out.println("%%%%%%解析取出binlog sql="+sql);
		System.out.println("%%%%%%解析取出binlog sql="+sql.contains(tableNameLower));
		if(!sql.contains(tableNameLower)){
			System.out.println("不存在");
		}else{
			System.out.println("存在");
			
			int a =2;
		}*/
		
		
		/*final Test1 test = new Test1();
        for(int i=0;i<10;i++){
            new Thread(){
                public void run() {
                    for(int j=0;j<1000;j++)
                        test.increase();
                };
            }.start();
        }
        System.out.println(Thread.activeCount());
        while(Thread.activeCount()>1)  //保证前面的线程都执行完
            Thread.yield();
        
        System.out.println(test.inc);*/
        
		/*ExecutorService executorService = Executors.newFixedThreadPool(20);
		int i =1;
		while(true){
				final CountDownLatch childThreadAnswer = new CountDownLatch(i);
				System.out.println("i="+i);
				for(int j = 0;j < i;j++){
					 executorService.execute(new Runnable() {
						@Override
						public void run() {
							try {
								Thread.sleep(2000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							System.out.println("子线11111程执行结束time="+System.currentTimeMillis());
							childThreadAnswer.countDown();
						}
					});
				}
				childThreadAnswer.await();
				System.out.println("%%%%%%MindgoTradeFetch11111子线程操作结束,再次循环开始,time ="+System.currentTimeMillis());
				i++;
		}*/
		//executorService.shutdown();
		
		
		/*ExecutorService executorService = Executors.newFixedThreadPool(20);
		for(int i=0;i<2;	i++){
			if(i==0){
				final CountDownLatch childThreadAnswer = new CountDownLatch(5);
				for(int j = 0;j < 5;j++){
					 executorService.execute(new Runnable() {
						@Override
						public void run() {
							try {
								Thread.sleep(2000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							System.out.println("子线11111程执行结束time="+System.currentTimeMillis());
							childThreadAnswer.countDown();
						}
					});
				}
				childThreadAnswer.await();
				System.out.println("%%%%%%MindgoTradeFetch11111子线程操作结束,再次循环开始,time ="+System.currentTimeMillis());
			}else{
				final CountDownLatch childThreadAnswer = new CountDownLatch(6);
				for(int j = 0;j < 6;j++){
					 executorService.execute(new Runnable() {
						@Override
						public void run() {
							try {
								Thread.sleep(2000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							childThreadAnswer.countDown();
							System.out.println("子线22222程执行结束time="+System.currentTimeMillis());
						}
					});
				}
				childThreadAnswer.await();
				System.out.println("%%%%%%MindgoTradeFetch22222子线程操作结束,再次循环开始,time ="+System.currentTimeMillis());
			}
		}
		executorService.shutdown();*/
		
		
		/*Object obj = null;
		String a = String.valueOf(obj);
		System.out.println(String.valueOf(obj));
		if("null".equals(a)){
			System.out.println("1");
		}
		if(a==null){
			System.out.println("2");
		}*/
		
		
		
		/*Map<String, Object> mindGoMap = new HashMap<String,Object>();
		mindGoMap.put("ccm", "222");
		
		HashMap<String,Object> pushMap = new HashMap<String,Object>();
		pushMap = CloneUtils.clone((HashMap<String,Object>)mindGoMap); //深拷贝-避免推送和真实交易并发问题
		
		
		HashMap<String,Object> dealMap = new HashMap<String,Object>();
		dealMap = CloneUtils.clone((HashMap<String,Object>)mindGoMap); //深拷贝-避免推送和真实交易并发问题
		
		
		System.out.println("1="+(pushMap == mindGoMap));
		System.out.println("2="+(dealMap == mindGoMap));
		System.out.println("3="+(pushMap == dealMap));
		System.out.println(pushMap.toString());
		System.out.println(dealMap.toString());
		System.out.println(mindGoMap.toString());*/
		
		
		/*List<String> b = new ArrayList<>();
		
		b.add("aa0");
		b.add("aa1");
		b.add("aa2");
		b.add("aa3");
		b.add("aa4");
		System.out.println(b.toString());
		b.remove(0);
		System.out.println(b.toString());*/
		
		
		
		
	/*	List<List<String>> a = new ArrayList<>();
		List<String> b = new ArrayList<>();
		List<String> c = new ArrayList<>();
		a.add(b);
		a.add(c);
		
		List<String> d = null;
		List<String> e = null;
		
		int i = 1;
		for(List<String> list : a){
			if(i==1){
				d = list;
			}
			if(i==2){
				e = list;
			}
			if(i==2){
				System.out.println("d==e "+(d==e));
			}
			i++;
		}*/
		
		
		
		/*Map<String,Object> map = new HashMap<>();
		Object object1 = map.get("ccm");
		if(object1 == null){
			System.out.println("object result ="+1);
		}else{
			System.out.println("object result ="+2);
		}*/
		
		/*if(StringUtils.isEmpty(object1)){
			System.out.println("object1 result ="+1);
		}else{
			System.out.println("object1 result ="+2);
		}
		*/
		/*int pushSize= 3;
		int reallyDealSize = 3;
		String corePoolSize = "40";
		System.out.println(pushSize + reallyDealSize);
		System.out.println((double)pushSize/(pushSize + reallyDealSize));
		System.out.println((((double)pushSize)/(pushSize + reallyDealSize))*Integer.valueOf(corePoolSize));
		int a = (int) ((((double)pushSize)/(pushSize + reallyDealSize))*Integer.valueOf(corePoolSize));
		System.out.println(a);*/
		
		
		/*String template = "最新量化策略: %s %s%s %s %s %s%s";
		System.out.println(String.format(template, "ag(T+d)", "买入", "开仓", "", "3手", "价格3210", ";"));*/
		
		
/*		
		String msg = "{\"data\":{\"result\":{\"packname\":\"A10005\",\"errMsg\":\"error.margin.order.update.inOrder.checkSerialNo.notExist\"}},\"success\":false}";
		String errMsgCim = MindGoUtil.getJsonValue(msg, "\"errMsg\":\"");
		System.out.println(errMsgCim);*/
		
		
		
		
		
		
		
		/*Map<String,String> map = new HashMap<String, String>();
		map.remove("ccm");
		System.out.println("2222222");
	*/
		
		/*MindgoSubscription mindgoSub = new MindgoSubscription();
		mindgoSub.setAccountType(1);
		mindgoSub.setSubcribeUserid("ccm");
		List<MindgoSubscription> integers=new ArrayList<>();
		integers.add(mindgoSub);
		integers.add(mindgoSub);
		integers.add(mindgoSub);
		integers.add(mindgoSub);
		integers.add(mindgoSub);
		integers.add(mindgoSub);
		integers.add(mindgoSub);
		integers.add(mindgoSub);
		integers.add(mindgoSub);
		integers.add(mindgoSub);
		integers.add(mindgoSub);
		integers.add(mindgoSub);
		integers.add(mindgoSub);
		integers.add(mindgoSub);
		integers.add(mindgoSub);
		
		final List<List<MindgoSubscription>> lists=averageAssign(integers, 2);
		System.out.println(lists);
		System.out.println(lists.size());*/
		
		
		
		/*int size = lists.size();
		
		for(int i = 0 ;i < size ; i++){
			List<MindgoSubscription> tempList = lists.get(i);
			if(tempList.isEmpty()){
				lists.remove(i);
				size--;
				i--;
			}
		}*/
		
	/*	delteEmptyList(lists);
		
		System.out.println(lists);
		System.out.println(lists.size());*/
		
		
		
		
		
		
		
		
		
		
		
		
		/*List<Integer> integers=new ArrayList<>();
		integers.add(1);
		integers.add(2);
		integers.add(3);
		integers.add(4);
		integers.add(5);
		integers.add(6);
		integers.add(7);
		integers.add(8);
		integers.add(9);
		integers.add(10);
		integers.add(11);
		integers.add(12);
		integers.add(13);
		integers.add(14);
		integers.add(15);
		final List<List<Integer>> lists=averageAssign(integers, 20);
		System.out.println(lists);
		System.out.println(lists.size());
		int size = lists.size();
		
		for(int i = 0 ;i < size ; i++){
			List<Integer> tempList = lists.get(i);
			if(tempList.isEmpty()){
				lists.remove(i);
				size--;
				i--;
			}
		}
		
		System.out.println(lists);
		System.out.println(lists.size());*/
		
		
		
		
		
		
		
		
		
		
		
		
		/*
		ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
		executor.setCorePoolSize(20);
		executor.setMaxPoolSize(30);
		executor.setKeepAliveSeconds(1);
		executor.setQueueCapacity(5);
		executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
		executor.initialize();
		executor.setAllowCoreThreadTimeOut(true);
		for( final List<Integer> childPushList : lists){
			executor.execute(new Runnable(){
				@Override
				public void run() {
					for(int subcribeUserid : childPushList){
						System.out.println(Thread.currentThread().getName()+":(1)"+subcribeUserid);
    				}
				}});
			
			
			executor.execute(new Runnable(){
				@Override
				public void run() {
					
					for(int subcribeUserid : childPushList){
						System.out.println(Thread.currentThread().getName()+":(2)"+subcribeUserid);
    				}
				}});
		}
		
		
		System.out.println("***********end************");
		//executor.shutdown();
*/		
		
		
		/*byte[] MAGIC_HEADER = new byte[]{(byte) 0xfe, (byte) 0x62, (byte) 0x69, (byte) 0x6e};//[-2, 98, 105, 110]
		
		//System.out.println(MAGIC_HEADER.length);
		
		byte[] magicHeader = {47, 42, 33, 53};//[47, 42, 33, 53]
		System.out.println(magicHeader.toString());
		  
		StringBuffer buffer = new StringBuffer();   
		for (int i = 0; i < magicHeader.length; i++) {   
		  buffer.append((char) magicHeader [i]);   
		}   
		String requestStr = buffer.toString();
		System.out.println("给的二进制文件开头4位内容:"+requestStr);
		
		StringBuffer buffe1 = new StringBuffer();   
		for (int i = 0; i < MAGIC_HEADER.length; i++) {   
			buffe1.append((char) MAGIC_HEADER [i]);   
		}   
		String requestStr1 = buffe1.toString();
		System.out.println("合法的二进制文件开头4位内容:"+requestStr1);
		  */
		
		 /*String filePath="D:\\ccm\\soft\\MySQL\\log\\";
		 File f = new File(filePath);
		 File[] files = f.listFiles();
			if(files != null && files.length > 0){
				for (File file : files) {
					if (file.isFile()) {
						System.out.println("文件名="+file.getName());
					} else {
					}
				}
			}
		 */
		
	/*	String a = "englishstudy";
		System.out.println(a.substring(0, 6));*/
		
		
		
		
		/* //读取文件(字节流)
	        InputStream in = new FileInputStream(filePath);
	        //读取数据
	        //一次性取多少字节
	        byte[] bytes = new byte[2048];
	        //接受读取的内容(n就代表的相关数据，只不过是数字的形式)
	        int n = -1;
	        StringBuilder sb = new StringBuilder();
	        //循环取出数据
	        while ((n = in.read(bytes,0,bytes.length)) != -1) {
	            //转换成字符串
	            String str = new String(bytes,0,n,"GBK");
	            //System.out.println(str);
	            sb.append(str);
	        }
	        //关闭流
	        in.close();
	        System.out.println("-------------");
	        System.out.println(sb.toString());*/
			
			
		/*Object b = new Boolean(true); 
		Boolean j = (Boolean)b;   //这里必须强制转换，否则编译报错。 
		boolean h = (Boolean)b;   //这里必须强制转换，否则编译报错。 
		System.out.println(j);
		System.out.println(h);*/
				
		
		/*File file1 = new File("D:\\ccm\\blackFiled");
		File file = new File("D:\\ccm\\blackFiled\\test_file.txt");
		file1.mkdirs();
		 //如果文件不存在，则新建一个
        if(!file.exists()){
            try {
                file.createNewFile();
            } catch (IOException e) {
            	e.printStackTrace();
            }
        }
		*/
		
		/*List<String> blackList = new CopyOnWriteArrayList<String>();
		
		blackList.add("ccm");
		System.out.println(blackList.contains("ccm"));*/
		
		/*ConcurrentHashMap<String, Long>   errorTime = new ConcurrentHashMap<String, Long>();
		System.out.println(errorTime.get("ccm"));
		System.out.println(System.currentTimeMillis());
		
		//获得系统的时间，单位为毫秒,转换为妙
        long totalMilliSeconds = System.currentTimeMillis();
        long totalSeconds = totalMilliSeconds / 1000;
         
        //求出现在的秒
        long currentSecond = totalSeconds % 60;
         
        //求出现在的分
        long totalMinutes = totalSeconds / 60;
        long currentMinute = totalMinutes % 60;
         
        //求出现在的小时
        long totalHour = totalMinutes / 60;
        long currentHour = totalHour % 24;
         
        //显示时间
        System.out.println("总毫秒为： " + totalMilliSeconds);
        System.out.println(currentHour + ":" + currentMinute + ":" + currentSecond + " GMT");
        */
        
        
        // 创建对象
       /* long sTime = System.currentTimeMillis();
        for (int i = 0; i < 1000000; i++) {
        System.out.println(i);
        }
        long eTime = System.currentTimeMillis();
        System.out.println(((eTime - sTime)/1000/60/60)+"时");
        System.out.println(((eTime - sTime)/1000)+"秒");
        System.out.println(((eTime - sTime)/1000/60)+"分");*/
		
		
		
		
		/*Date date = new Date();//获取当前时间    
		Calendar calendar = Calendar.getInstance();    
		calendar.setTime(date);    
		System.out.println(calendar.getTime().toLocaleString());
		//calendar.add(Calendar.YEAR, -1);//当前时间减去一年，即一年前的时间    
		//calendar.add(Calendar.MONTH, -1);//当前时间前去一个月，即一个月前的时间    
		calendar.add(Calendar.DAY_OF_MONTH, -14);
		System.out.println(calendar.getTime().toLocaleString());*/
		
		
	/*	int naturalDate = EraCalendar.getCurrent(EraCalType.date);
		System.out.println("自然日期="+naturalDate);
		int afterDate = EraCalendar.get(EraCalendar.adjust(naturalDate, -14, EraCalType.dayOfMonth), EraCalType.date);
		System.out.println("后一天日期="+afterDate);
		*/
		
		/*%%%%%%td推送策略处理前：buy=b,type=0,orderType=2
		%%%%%%td推送策略处理前：buy=1,type=0,orderType=2*/
		
		/*String buy = "b";
		String type = "0";
		
		
		//buy和type td处理成its一样
		if("b".equals(buy)){
			buy = "2";
		}else if("s".equals(buy)){
			buy = "1";
		}else{
		}
		
		//buy和type td处理成its一样
		if("0".equals(type)){
			type = "1";
		}else if("1".equals(type)){
			type = "2";
		}else{
		}
		
		System.out.println("buy="+buy+";type="+type);*/
		
		
		
		/*  ConcurrentHashMap<String, String> sessions = new ConcurrentHashMap<String, String>();
		  
		  System.out.println(sessions.get("ccm"));*/
		
	/*	  ConcurrentHashMap<String, PcmSession> sessions = new ConcurrentHashMap<String, PcmSession>();
		  
		  System.out.println(sessions.get("ccm"));*/
		  //System.out.println(sessions.get("ccm").getIoSession());
		
		
		//System.out.println(String.valueOf(null));
		
		/*System.out.println(Double.valueOf(null));*/
		/*Object a= null;
		
		System.out.println(a.toString());*/
		
		
		
		
		
		
		/*String clientId = "pushItsPriceClient";
		
		boolean pushedITSClientFlag = clientId.contains(MindGoConstants.PUSHED_ITS_CLIENTID);
		
		
		System.out.println(pushedITSClientFlag);
		*/
		
		
		
		
		
		/*ConcurrentHashMap<String, String> pushRelations = new ConcurrentHashMap<String, String>();
		System.out.println(pushRelations.get("ccm"));
		pushRelations.remove("ccm");
		pushRelations.put("zsx", "aaa");
		System.out.println(pushRelations.get("zsx"));
		pushRelations.remove("zsx");
		System.out.println(pushRelations.get("zsx"));*/
    	
		/*String a = "mindgo;";
		String[] array =a.split(";");
		System.out.println(array.length);
		boolean flag = Arrays.asList(array).contains("");
		System.out.println("flag:" + flag);//--- flag:true
		flag = Arrays.asList(array).contains("0");
		System.out.println("flag:" + flag);//--- flag:false
		flag = Arrays.asList(array).contains("5");
		System.out.println("flag:" + flag);//--- flag:false
		 */		
		
    	/*JSONObject jsonMap = new JSONObject();
    	jsonMap.put("amount", "");
    	long data_long = jsonMap.getLongValue("amount");
    	
    	System.out.println(data_long);*/
		
		/*String number = "777777777777777777";
		System.out.println(isInteger(number));*/
		
		/*String clientId ="pushedClientId1";
		if(clientId.contains("pushedClientId")){
			System.out.println("包含");
		}else{
			System.out.println("不包含");
		}*/
		
	/*	String tdJsonStr = "{\"data\":{\"result\":\"{\"relationNo\":\"\",\"marginAccount\":\"2018050100000199\",\"natureDate\":20180726,\"branchRate\":1.31992,\"oldState\":\"0\",\"instrumentId\":\"MARGIN_FEX\",\"buy\":\"1\",\"channel\":\"\",\"exchRate\":1.319890,\"businessTime\":0,\"type\":\"1\",\"slRate\":0.0,\"lot\":\"10\",\"businessDate\":0,\"queryFlag\":\"1\",\"customerType\":\"\",\"custManager\":\"\",\"amount2\":1319.89,\"marginScale\":1.32061,\"spotRate\":1.31989,\"amount1\":-1000.00,\"pip\":30,\"customerId\":\"00001180710000187009\",\"prefPoint\":0,\"expireDate\":0,\"state\":\"1\",\"objectId\":\"GBP/USD\",\"tookAmount\":1319.89000000000000,\"profit2\":0,\"systemId\":\"\",\"cashType\":\"\",\"productId\":\"GBP/USD\",\"cyCode2\":\"USD\",\"settleCurrency\":\"USD\",\"cyCode1\":\"GBP\",\"tranMode\":1,\"tradeDate\":20180501,\"ptRate\":0.0,\"userId\":\"-\",\"productProtocol\":\"\",\"serialNo\":\"MG18050100003128\",\"tradeTime\":125240,\"bankId1\":\"00001\",\"bankId2\":\"00001\",\"totalCloseAmount\":0}\",\"messageId\":\"/doMarginTrade.action\"},\"success\":true}";
		JSONObject endJson = JSONObject.parseObject(tdJsonStr);  */
		
		
		/*String  temp = "\"data\":{\"result\":\"{\"relationNo\":\"\",\"instrumentId\":\"MARGIN_FEX\",\"buy\":\"2\",\"type\":\"1\",\"custAccount\":\"2018050100000204\",\"point\":0,\"mode\":\"1\",\"lot\":1,\"freezeAmount\":0,\"orderTime\":193752,\"custManager\":\"\",\"marginScale\":0,\"amount1\":100,\"channelSerialNo\":\"1532510973\",\"expireDate\":99999999,\"state\":\"1\",\"cashType\":\"钞\",\"productId\":\"AUD/USD\",\"rate1\":0.740900,\"rate2\":0.740900,\"settleCurrency\":\"USD\",\"orderNatureDate\":20180725,\"stopLosePrice\":0,\\\"serialNo\\\":\\\"MG18050100001225\\\",\"bankId1\":\"00001\",\"bankId2\":\"00001\",\"expireTime\":0,\"profitTakePrice\":0,\"orderDate\":20180501}\",\"messageId\":\"/doMarginOrder.action\"},\"success\":true,\"telephone\":\"18758363379\",\"responseId\":\"217a60be-de9b-4465-a684-1e02f87bcd72\"";
		String serialNo = getJsonValue(temp,  "\\\"serialNo\\\":\\\"");//委托单号
		System.out.println("serialNo="+serialNo);
		if(!"".equals(serialNo) && serialNo != null) {//成功委托
			System.out.println("1111");
		}*/
		
		
		
	/*	String tdJsonStr = "{\"data\":{\"result\":{\"datals\":[{\"natureDate\":20180724,\"message\":\"MARGIN_FEX\",\"instrumentId\":\"MARGIN_FEX\",\"buy\":\"2\",\"exchRate\":1.313200,\"type\":\"1\",\"slRate\":0.000000,\"lot\":1,\"queryFlag\":\"1\",\"amount2\":-131.3200,\"amount1\":100.0000,\"pip\":0,\"prefPoint\":0.000000,\"ptslSerialNo\":\"MG18050100001199\",\"expireDate\":0,\"state\":\"1\",\"objectId\":\"GBP/USD\",\"tookAmount\":131.3200,\"profit2\":0.0000,\"cashType\":\"2\",\"systemId\":\"\",\"profit1\":0.0000,\"productId\":\"GBP/USD\",\"settleCurrency\":\"USD\",\"tranMode\":\"2\",\"tradeDate\":20180501,\"ptRate\":0.000000,\"COUNTNUM\":63,\"serialNo\":\"MG18050100003090\",\"tradeTime\":192354,\"bankId1\":\"00001\",\"bankId2\":\"00001\",\"relationCostRate\":0.000000,\"rollMode\":\"0\",\"totalCloseAmount\":0.0000,\"tradeChannel\":\"MC1\"},{\"natureDate\":20180724,\"instrumentId\":\"MARGIN_FEX\",\"buy\":\"2\",\"exchRate\":1.313300,\"type\":\"1\",\"slRate\":0.000000,\"lot\":1,\"queryFlag\":\"1\",\"amount2\":-131.3300,\"amount1\":100.0000,\"pip\":0,\"prefPoint\":0.000000,\"ptslSerialNo\":\"MG18050100001201\",\"expireDate\":0,\"state\":\"1\",\"objectId\":\"GBP/USD\",\"tookAmount\":131.3300,\"profit2\":0.0000,\"cashType\":\"2\",\"systemId\":\"\",\"profit1\":0.0000,\"productId\":\"GBP/USD\",\"settleCurrency\":\"USD\",\"tranMode\":\"2\",\"tradeDate\":20180501,\"ptRate\":0.000000,\"COUNTNUM\":63,\"serialNo\":\"MG18050100003089\",\"tradeTime\":192253,\"bankId1\":\"00001\",\"bankId2\":\"00001\",\"relationCostRate\":0.000000,\"rollMode\":\"0\",\"totalCloseAmount\":0.0000,\"tradeChannel\":\"MC1\"},{\"natureDate\":20180724,\"instrumentId\":\"MARGIN_FEX\",\"buy\":\"2\",\"exchRate\":1.313300,\"type\":\"1\",\"slRate\":0.000000,\"lot\":1,\"queryFlag\":\"1\",\"amount2\":-131.3300,\"amount1\":100.0000,\"pip\":0,\"prefPoint\":0.000000,\"ptslSerialNo\":\"MG18050100001200\",\"expireDate\":0,\"state\":\"1\",\"objectId\":\"GBP/USD\",\"tookAmount\":131.3300,\"profit2\":0.0000,\"cashType\":\"2\",\"systemId\":\"\",\"profit1\":0.0000,\"productId\":\"GBP/USD\",\"settleCurrency\":\"USD\",\"tranMode\":\"2\",\"tradeDate\":20180501,\"ptRate\":0.000000,\"COUNTNUM\":63,\"serialNo\":\"MG18050100003088\",\"tradeTime\":192253,\"bankId1\":\"00001\",\"bankId2\":\"00001\",\"relationCostRate\":0.000000,\"rollMode\":\"0\",\"totalCloseAmount\":0.0000,\"tradeChannel\":\"MC1\"},{\"natureDate\":20180724,\"instrumentId\":\"MARGIN_FEX\",\"buy\":\"2\",\"exchRate\":1.313400,\"type\":\"1\",\"slRate\":0.000000,\"lot\":1,\"queryFlag\":\"1\",\"amount2\":-131.3400,\"amount1\":100.0000,\"pip\":0,\"prefPoint\":0.000000,\"ptslSerialNo\":\"MG18050100001198\",\"expireDate\":0,\"state\":\"1\",\"objectId\":\"GBP/USD\",\"tookAmount\":131.3400,\"profit2\":0.0000,\"cashType\":\"2\",\"systemId\":\"\",\"profit1\":0.0000,\"productId\":\"GBP/USD\",\"settleCurrency\":\"USD\",\"tranMode\":\"2\",\"tradeDate\":20180501,\"ptRate\":0.000000,\"COUNTNUM\":63,\"serialNo\":\"MG18050100003087\",\"tradeTime\":190609,\"bankId1\":\"00001\",\"bankId2\":\"00001\",\"relationCostRate\":0.000000,\"rollMode\":\"0\",\"totalCloseAmount\":0.0000,\"tradeChannel\":\"MC1\"},{\"natureDate\":20180724,\"instrumentId\":\"MARGIN_FEX\",\"buy\":\"2\",\"exchRate\":1.313400,\"type\":\"1\",\"slRate\":0.000000,\"lot\":1,\"queryFlag\":\"1\",\"amount2\":-131.3400,\"amount1\":100.0000,\"pip\":0,\"prefPoint\":0.000000,\"ptslSerialNo\":\"MG18050100001197\",\"expireDate\":0,\"state\":\"1\",\"objectId\":\"GBP/USD\",\"tookAmount\":131.3400,\"profit2\":0.0000,\"cashType\":\"2\",\"systemId\":\"\",\"profit1\":0.0000,\"productId\":\"GBP/USD\",\"settleCurrency\":\"USD\",\"tranMode\":\"2\",\"tradeDate\":20180501,\"ptRate\":0.000000,\"COUNTNUM\":63,\"serialNo\":\"MG18050100003086\",\"tradeTime\":190608,\"bankId1\":\"00001\",\"bankId2\":\"00001\",\"relationCostRate\":0.000000,\"rollMode\":\"0\",\"totalCloseAmount\":0.0000,\"tradeChannel\":\"MC1\"}],\"pageCtrl\":true,\"pageSize\":10,\"start\":0,\"total\":63},\"msgHeader\":{},\"messageId\":\"/queryMarginTradeLog.action\"},\"success\":true}";
		
		if(tdJsonStr.indexOf("\"errMsg\":\"") != -1 || tdJsonStr.indexOf("\"message\":\"") != -1){
			System.out.println(111);
		}else{
			System.out.println(222);
		}*/
		
		
		
		/*String a = "手机号telephone格式不符合规定&手机号telephone最大长度为11";
		String[] arrStr = a.split("&");
	    sortStringArray(arrStr);
        for (int i = 0; i < arrStr.length; i++) {
            //System.out.println(arrStr[i]);
        }*/
		
       /* String[] arr = {"手机号telephone格式不符合规定", "手机号telephone最大长度为11","我","手机号telephone吃","在手机号telephone格式不符合规定"};
		Comparator<Object> cmp = Collator.getInstance(java.util.Locale.CHINA);
		Collections.sort(Arrays.asList(arr),Collections.reverseOrder(cmp));
 
		//想应用拼音排序只能用reverseOrder方法，不过如果需要正排可以对数组反向读取
		for(int i=0;i<arr.length;i++){
			System.out.println(arr[i]);
		}*/

		 
		 
		
		
		/*Object beginCount = "0";
		
		System.out.println((Integer)beginCount);
		
		System.out.println(	Integer.valueOf(	((Integer)beginCount).intValue() - 1	)	);
		*/
		
		//System.out.println(isPhone("18392045561"));
		
		//System.out.println(Integer.valueOf(""));
		
		
		/*String price ="c3080670-5da0-439c-9633-c3e4c4cf7708 1 Au99.99  267.87 267.94 ";
		
		//String[] priceArray = price.split("\u0000");
		String[] priceArray = price.split("\\s+");
		int size = priceArray.length;
		System.out.println(size);
		
		System.out.println(Arrays.toString(priceArray));*/
		
	/*	String jsonStr = "{\"param.customerId\":\"00001170910003500024\",\"param.buy\":\"2\",\"param.stopLosePrice\":0.76437,\"param.orderStatus\":\"2\",\"telePhone\":\"135170897933\",\"param.custQueryType\":\"3\",\"param.channel\":\"MC1\",\"param.lot\":1.0,\"param.expireTime\":\"\",\"param.rate2\":0,\"param.rate1\":0.765739,\"param.productId\":\"AUD/USD\",\"param.callOrderId\":\"\",\"param.objectId\":\"\",\"param.marginAccount\":\"2017092900000039\",\"param.systemId\":\"00\",\"packname\":\"A10001\",\"param.relationNo\":\"\",\"param.mode\":\"1\",\"param.type\":\"1\",\"param.profitTakePrice\":0.76541,\"msgHeader.channelSerialNo\":\"qazwsxedcrfv\",\"param.productProtocol\":\"\",\"param.point\":0,\"param.expireDate\":20180630,\"param.cashType\":\"1\"}";
		
		
		System.out.println(jsonStr.replace("param.", ""));*/
		
		
		/*
		*//**  
         * 日期格式正确  
         */ 
       /* String date1 = "20140103";    
        *//**  
         * 日期范围不正确---平年二月没有29号  
         *//*   
        String date2 = "20140229";    
        *//**  
         * 日期月份范围不正确---月份没有13月  
         *//*   
        String date3 = "20141303";    
        *//**  
         * 日期范围不正确---六月没有31号  
         *//* 
        String date4 = "20140631";    
        *//**  
         * 日期范围不正确 ----1月超过31天  
         *//*   
        String date5 = "20140132";    
        *//**  
         * 这个测试年份  
         *//*    
        String date6 = "00140103"; 
        
        String date7 = "2";  
        
        
            
        Test1 date = new Test1();    
            
        *//**  
         * 输出结果 
         *//*    
        System.out.println(date.isDate(date1));    
        System.out.println(date.isDate(date2));    
        System.out.println(date.isDate(date3));    
        System.out.println(date.isDate(date4));    
        System.out.println(date.isDate(date5));    
        System.out.println(date.isDate(date6));    
        System.out.println(date.isDate(date7));    
		*/
		
		
	/*	String path = "D:\\logs\\templateOutPath\\tdOrder\\20180703\\";
		File file =new File(path);
		if(!file.exists()){
				file.createNewFile();
		}
		String instId = " ITS-Match-EUR/USD";
		System.out.println(instId.replace("/", ":"));*/
		
		/*
		File file = new File("D:/logs/templateOutPath/tdMatch/20180703");
		find(file);*/
		
		
		
		/*String  path = "D:/123/321";
		File file =new File(path);
		System.out.println(file.isDirectory());
		if(!file.isDirectory()){
			file.mkdirs();
		}
		System.out.println(file.isDirectory());*/
		
		
		
		
		
		
		
		/*System.out.println(getPhone("6f3a148627f4b24aa00b92ee61014235"));
		
		List<String> list = new ArrayList<String>();    
		list.add("a1");    
		list.add("a2");    
		String[] toBeStored = list.toArray(new String[list.size()]);    
		for(String s : toBeStored) {    
		System.out.println(s);    
		}*/
		
		
		/*String marginPriceStr = "0:012001,8.9142,8.9213,20180410,090451,1;012013,11.093,11.1042,20180410,090451,1;012014,1.4133,1.4146,20180410,090451,1;012015,1.3505,1.3525,20180410,090451,1;012018,1.8526,1.8552,20180410,090451,1;012027,150.77,150.96,20180410,090451,1;012028,1.7949,1.7974,20180410,090451,1;012029,1.8352,1.8378,20180410,090451,1;012087,0.0,0.0,0,0,0;013001,0.8033,0.8037,20180410,085410,0;013027,13.5889,13.5981,20180410,090328,1;014001,0.0,0.0,0,0,0;014013,7.8466,7.8521,20180410,085902,2;014015,0.9554,0.9563,20180410,090417,0;014018,1.3104,1.3119,20180410,090320,2;014027,106.66,106.74,20180410,090328,1;014028,1.2698,1.2708,20180410,090410,2;014081,0.0,0.0,0,0,0;015001,6.5951,6.6015,20180410,090417,1;015013,8.2069,8.2169,20180410,090417,1;015018,1.3705,1.3729,20180410,090417,1;015027,111.55,111.71,20180410,090417,1;015028,1.3279,1.33,20180410,090417,1;018001,4.8079,4.8126,20180410,090320,1;018013,5.983,5.9903,20180410,090320,1;018027,81.32,81.44,20180410,090328,1;027001,0.0591,0.0591,20180410,090328,0;028001,4.9627,4.9672,20180410,090410,0;028013,6.1756,6.1826,20180410,090410,0;028018,1.0313,1.033,20180410,090410,0;028027,83.94,84.05,20180410,090410,0;029001,4.8534,4.8581,20180410,090451,1;029013,6.0396,6.0468,20180410,090451,1;029014,0.7695,0.7703,20180410,090451,1;029015,0.7353,0.7365,20180410,090451,1;029018,1.0086,1.0103,20180410,090451,1;029027,82.09,82.21,20180410,090451,1;029028,0.9772,0.9788,20180410,090451,1;029087,1.0509,1.0538,20180410,090451,1;034014,1336.67,1338.27,20180410,090451,2;035001,271.02,271.4,20180410,090431,1;036014,16.472,16.552,20180410,090410,1;038001,7.771,7.7776,20180410,090451,1;038012,0.8711,0.8724,20180410,090451,0;038013,9.6704,9.6806,20180410,090451,1;038014,1.2322,1.2331,20180410,090451,1;038015,1.1774,1.1791,20180410,090451,1;038018,1.6149,1.6174,20180410,090451,1;038027,131.43,131.62,20180410,090451,1;038028,1.5646,1.567,20180410,090451,1;038029,1.5998,1.6023,20180410,090451,1;038087,1.6834,1.6864,20180410,090451,1;045014,928.35,940.35,20180410,090451,2;068001,3.341,3.355,20180410,090408,1;087001,0.0,0.0,0,0,0;087013,0.0,0.0,0,0,0;087014,0.7311,0.7321,20180410,090407,1;087027,0.0,0.0,0,0,0;841014,929.17,941.17,20180410,090435,1;844001,188.43,190.83,20180410,090435,1;845001,188.26,190.66,20180410,090451,2;";
		 String[] pircesArr = marginPriceStr.split(":");
	        String state = pircesArr[0];
	        String[] prices = null;
	        try {
	            if ("0".equals(state)) {
	                prices = pircesArr[1].split(";");
	                System.out.println("--->"+prices.length);
	                for (String price : prices) {
	                    String[] pBody = price.split(",");
	                    System.out.println(Arrays.toString(pBody));
	                    System.out.println(pBody.length);
	                }
	            } else {
	            }
	        } catch (Exception e) {
	        	
	        }*/
		
		/*Map map = new HashMap<String, String>();
		map.put("1", "1");
		map.put("2", "2");
		map.put("3", "3");
		System.out.println(map.toString());
		map.put("1", "2");
		System.out.println(map.toString());*/
		
		  /*	long times=1000*_TEN_THOUSAND;
	        long t1=System.currentTimeMillis();
	        testSystem(times);
	        long t2=System.currentTimeMillis();
	        System.out.println(t2-t1);
	 
	        testCalander(times);
	        long t3=System.currentTimeMillis();
	        System.out.println(t3-t2);
	 
	        testDate(times);
	        long t4=System.currentTimeMillis();
	        System.out.println(t4-t3);
		
		
	        System.out.println(System.currentTimeMillis());
	        System.out.println(Calendar.getInstance().getTimeInMillis());
	        System.out.println(new Date().getTime());
		
		
	        SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");//设置日期格式
	        String date = df.format(new Date());// new Date()为获取当前系统时间，也可使用当前时间戳
	        System.out.println(date);*/
		
		
		
		
		
		
		
		
		
		
//		
//	String a= "aa:bbb:cc";
//	System.out.println("a".indexOf(a));
		
	
	/*String a = "DeferQuotation 1 cccm 20180605 xiaoming ";*/
	
	//String[] array = a.split('\000');
	
	//System.out.println(Arrays.toString(array));
	
	
	/*String[] c = a.split("\\s+");
    for (String ss : c){
        System.out.println(ss);
    }
    
    System.out.println("----->"+c.length);*/
	
	//System.out.println(array[0]);
	/*System.out.println(array[1]);
	System.out.println(array[2]);
	System.out.println(array[3]);*/
		
		
		
		
		
		
		
		  /*List<JavaBean> list = new ArrayList<JavaBean>();
	        list.add(new JavaBean("1010", "admin"));
	        list.add(new JavaBean("1010", "admin"));
	        list.add(new JavaBean("1020", "xiaohua"));
	        list.add(new JavaBean("1020", "xiaohua"));
	        List<List<JavaBean>> groupList = getListByGroup(list);
	        for (List<JavaBean> bean : groupList) {
	            System.out.println(bean);
	        }*/
		
		
	/*	
		Map<String,String> map = new HashMap<String,String>();   
		map.put("a","aaa");   
		map.put("b","bbb");   
		map.put("c","ccc");   */
		/*String json=JSON.toJSONString(map);   
		System.out.println(json);//输出{"a":"aaa","b":"bbb","c":"ccc"}  
*/	
		
	/*	System.out.println(map.get("aaa"));*/
		
	
	
	
	
	}
	
	
	
	public static void find(File f) {
		if (!f.isDirectory() || f.listFiles().length <= 0){
			return;
		}
		File[] files = f.listFiles();
		for (File file : files) {
			if (file.isFile()) {
				System.out.println("got: " + file.getName());
				if (file.getName().equals("TDMatch-Total.xlsx")) {
					System.out.println(file.toString());
				}
			} else {
				System.out.println("got: " + file.getName());
				if (file.getName().equals("test11")) {
					System.out.println(file);
				}
				//find(file); // 这个不能放进else里
			}
		}
	}

	
	 public boolean isDate(String date)    
     {    
         /**  
          * 判断日期格式和范围  
          */    
         String rexp = "^((\\d{2}(([02468][048])|([13579][26]))[\\/\\s]?((((0?[13578])|(1[02]))[\\/\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\/\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\/\\s]?((0?[1-9])|([1-2][0-9])))))|(\\d{2}(([02468][1235679])|([13579][01345789]))[\\/\\s]?((((0?[13578])|(1[02]))[\\/\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\/\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\/\\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))";    
             
         Pattern pat = Pattern.compile(rexp);      
             
         Matcher mat = pat.matcher(date);      
             
         boolean dateType = mat.matches();    
 
         return dateType;    
     }    
	 
	 /**
	  * 中国电信号段 133、149、153、173、177、180、181、189、199
		中国联通号段 130、131、132、145、155、156、166、175、176、185、186
		中国移动号段 134(0-8)、135、136、137、138、139、147、150、151、152、157、158、159、178、182、183、184、187、188、198
		其他号段
		14号段以前为上网卡专属号段，如中国联通的是145，中国移动的是147等等。
		虚拟运营商
		电信：1700、1701、1702
		移动：1703、1705、1706
		联通：1704、1707、1708、1709、171
		卫星通信：1349
		
		^((13[0-9])|(14[5,7,9])|(15([0-3]|[5-9]))|(17[0,1,3,5,6,7,8])|(18[0-9])|(19[8|9]))\\d{8}$
	  * @param phone
	  * @return
	  */
	 public static boolean isPhone(String phone) {
		 String rexp = "^((13[0-9])|(14[5,7,9])|(15([0-3]|[5-9]))|(17[0,1,3,5,6,7,8])|(18[0-9])|(19[8|9]))\\d{8}$";    
         
         Pattern pat = Pattern.compile(rexp);      
             
         Matcher mat = pat.matcher(phone);      
             
         boolean dateType = mat.matches();    
 
         return dateType; 
		}
	
	 public static void sortStringArray(String[] arrStr) {
	        String temp;
	        for (int i = 0; i < arrStr.length; i++) {
	            for (int j = arrStr.length - 1; j > i; j--) {
	                if (arrStr[i].length() > arrStr[j].length()) {
	                    temp = arrStr[i];
	                    arrStr[i] = arrStr[j];
	                    arrStr[j] = temp;
	                }
	            }
	        }
	    }
	 /**
		 * 获取json中指定的值
		 * @param json
		 * @param spiltStr
		 * @return
		 */
		public static String getJsonValue(String jsonstr,String spiltStr){
			if(jsonstr.indexOf(spiltStr) != -1){  
				int spiltIndex = jsonstr.indexOf(spiltStr);
				String spiltString = jsonstr.substring(spiltIndex);
				
				int indexStart = spiltString.indexOf(":\\\"",1)+3;
				int indexEnd = spiltString.indexOf("\\\",", 1);
				String returnStr = spiltString.substring(indexStart,indexEnd);
				return returnStr;
				
			}else{
				return "";
			}
		}
		
		
		
	public static boolean isInteger(String str) {  
        Pattern pattern = Pattern.compile("^[-\\+]?[\\d]*$");  
        return pattern.matcher(str).matches();  
	}
	
	
	private static List<List<JavaBean>> getListByGroup(List<JavaBean> list) {
		
        List<List<JavaBean>> result = new ArrayList<List<JavaBean>>();
        Map<String, List<JavaBean>> map = new TreeMap<String, List<JavaBean>>();
 
        for (JavaBean bean : list) {
        	
        	boolean a = map.containsKey(bean.getId());//
        	
            if (map.containsKey(bean.getId())) {
                List<JavaBean> t = map.get(bean.getId());
                t.add(new JavaBean(bean.getId(), bean.getName()));
                //new ArrayList<JavaBean>().add(new JavaBean(bean.getId(), bean.getName()));
                map.put(bean.getId(), t);
            } else {
                List<JavaBean> t = new ArrayList<JavaBean>();
                t.add(new JavaBean(bean.getId(), bean.getName()));
                map.put(bean.getId(), t);
            }
        }
        for (Entry<String, List<JavaBean>> entry : map.entrySet()) {
            result.add(entry.getValue());
        }
        return result;
    }
	
	public static String getPhone(String phone){
		//return AesBaseUtil.decode(phone);
		return null;
	}
	
	public static void testSystem(long times){//use 188
        for(int i=0;i<times;i++){
            long currentTime=System.currentTimeMillis();
        }
    }
 
    public static void testCalander(long times){//use 6299
        for(int i=0;i<times;i++){
            long currentTime=Calendar.getInstance().getTimeInMillis();
        }
    }
 
    public static void testDate(long times){
        for(int i=0;i<times;i++){
            long currentTime=new Date().getTime();
        }
    }
    private static long _TEN_THOUSAND=10000;
}
